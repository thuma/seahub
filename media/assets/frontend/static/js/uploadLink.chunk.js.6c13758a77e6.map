{"version":3,"sources":["pages/upload-link/upload-list-item.js","pages/upload-link/forbid-upload-list-item.js","pages/upload-link/upload-progress-dialog.js","pages/upload-link/file-uploader.js","pages/upload-link/index.js"],"names":["UPLOAD_UPLOADING","UPLOAD_ERROR","UPLOAD_ISSAVING","UPLOAD_UPLOADED","UploadListItem","props","onUploadCancel","e","preventDefault","resumableFile","onUploadRetry","formatFileSize","size","toFixed","state","uploadState","nextProps","error","remainingTime","isSaved","this","setState","progress","Math","round","className","newFileName","isUploading","role","style","width","aria-valuenow","aria-valuemin","aria-valuemax","gettext","Utils","formatTime","dangerouslySetInnerHTML","__html","href","onClick","React","Component","ForbidUploadListItem","file","msg","replace","maxUploadFileSize","name","colSpan","UploadProgressDialog","toggleDropdown","dropdownOpen","allFilesUploaded","isOpen","toggle","color","caret","onFileUpload","onFolderUpload","outline","onCancelAllUploading","disabled","forbidUploadFileList","map","index","uploadFileList","FileUploader","componentWillUnmount","window","onbeforeunload","dragAndDrop","resumable","disableDropOnDocument","uploader","isUploadProgressDialogShow","totalProgress","bindCallbackHandler","minFileSizeErrorCallback","fileTypeErrorCallback","maxFilesErrorCallback","opts","maxFileSizeErrorCallback","bindEventHandler","on","onChunkingComplete","bind","onFileAdded","onFileProgress","onFileUploadSuccess","onProgress","onComplete","onFileError","onError","onDragStart","files","errorCount","maxFiles","maxNumberOfFilesForFileupload","message","toaster","danger","push","path","fileName","relativePath","isFile","formData","parent_dir","relative_path","slice","lastIndexOf","length","setUploadFileList","seafileAPI","sharedUploadLinkGetFileUploadUrl","token","then","res","target","data","upload_link","resumableUpload","catch","errMessage","getErrorMsg","isUploadLinkLoaded","upload","repoID","getFileUploadedBytes","uploadedBytes","blockSize","parseInt","resumableUploadFileBlockSize","offset","floor","markChunksCompleted","filesAddedComplete","registerGlobalVariable","uploadBitrate","getBitrate","item","uniqueIdentifier","lastSize","time","loaded","now","Date","getTime","forEach","timestamp","timeDiff","bitrateInterval","currentTime","JSON","parse","dir_name","indexOf","dirent","id","type","mtime","notifiedFolders","some","errorMessage","retryFileList","setHeaders","chunkSize","getOpt","fileSize","startByte","endByte","min","encodeURI","setQuery","generateUniqueIdentifier","webkitRelativePath","MD5","nativeEvent","stopImmediatePropagation","stopPropagation","uploadInput","current","removeAttribute","click","setAttribute","onCloseUploadDialog","uploadingItem","filter","cancel","retryUploadFile","bootstrap","firedRetry","resumableObj","replaceRepetitionFile","getUpdateLink","cancelFileUpload","pop","currentResumableFile","createRef","Resumablejs","query","fileType","filetypes","undefined","maxFileSize","testMethod","testChunks","headers","withCredentials","simultaneousUploads","fileParameterName","forceChunkSize","maxChunkRetries","minFileSize","assignBrowse","assignDrop","document","getElementById","ref","loggedUser","app","pageOptions","username","uploadLink","dirName","sharedBy","noQuota","SharedUploadLink","direntObject","shareLinksUploadDone","joinPath","HTMLescape","avatar","ReactDOM","render"],"mappings":"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","file":"static/js/uploadLink.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { gettext } from '../../utils/constants';\nimport { Utils } from '../../utils/utils';\n\nconst propTypes = {\n  resumableFile: PropTypes.object.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n};\n\nconst UPLOAD_UPLOADING = 'uploading';\nconst UPLOAD_ERROR = 'error';\nconst UPLOAD_ISSAVING = 'isSaving';\nconst UPLOAD_UPLOADED = 'uploaded';\n\nclass UploadListItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadState: UPLOAD_UPLOADING\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { resumableFile } = nextProps;\n    let uploadState = UPLOAD_UPLOADING;\n\n    if (resumableFile.error) {\n      uploadState = UPLOAD_ERROR;\n    } else {\n      if (resumableFile.remainingTime === 0 && !resumableFile.isSaved) {\n        uploadState = UPLOAD_ISSAVING;\n      }\n\n      if (resumableFile.isSaved) {\n        uploadState = UPLOAD_UPLOADED;\n      }\n    }\n\n    this.setState({uploadState: uploadState});\n  }\n\n  onUploadCancel = (e) => {\n    e.preventDefault();\n    this.props.onUploadCancel(this.props.resumableFile);\n  }\n\n  onUploadRetry = (e) => {\n    e.preventDefault();\n    this.props.onUploadRetry(this.props.resumableFile);\n  }\n\n  formatFileSize = (size) => {\n    if (typeof size !== 'number') {\n      return '';\n    }\n    if (size >= 1000 * 1000 * 1000) {\n      return (size / (1000 * 1000 * 1000)).toFixed(1) + ' G';\n    }\n    if (size >= 1000 * 1000) {\n      return (size / (1000 * 1000)).toFixed(1) + ' M';\n    }\n    if (size >= 1000) {\n      return (size / 1000).toFixed(1) + ' K';\n    }\n    return size.toFixed(1) + ' B';\n  }\n\n  render() {\n    let { resumableFile } = this.props;\n    let progress = Math.round(resumableFile.progress() * 100);\n    let error = resumableFile.error;\n\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{resumableFile.newFileName}</div>\n        </td>\n        <td>\n          <span className=\"file-size\">{this.formatFileSize(resumableFile.size)}</span>\n        </td>\n        <td className=\"upload-progress\">\n          {(this.state.uploadState === UPLOAD_UPLOADING || this.state.uploadState === UPLOAD_ISSAVING) &&\n            <Fragment>\n              {resumableFile.size >= (100 * 1000 * 1000) &&\n                <Fragment>\n                  {resumableFile.isUploading() && (\n                    <div className=\"progress-container\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      {(resumableFile.remainingTime === -1) && <div className=\"progress-text\">{gettext('Preparing to upload...')}</div>}\n                      {(resumableFile.remainingTime > 0) && <div className=\"progress-text\">{gettext('Remaining')}{' '}{Utils.formatTime(resumableFile.remainingTime)}</div>}\n                      {(resumableFile.remainingTime === 0) && <div className=\"progress-text\">{gettext('Indexing...')}</div>}\n                    </div>\n                  )}\n                  {!resumableFile.isUploading() && (\n                    <div className=\"progress-container d-flex align-items-center\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              }\n              {(resumableFile.size < (100 * 1000 * 1000)) &&\n                <div className=\"progress-container d-flex align-items-center\">\n                  <div className=\"progress\">\n                    <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                  </div>\n                </div>\n              }\n            </Fragment>\n          }\n          {this.state.uploadState === UPLOAD_ERROR && (\n            <div className=\"message err-message ml-0\" dangerouslySetInnerHTML={{__html: error}}></div>\n          )}\n        </td>\n        <td className=\"upload-operation\">\n          <Fragment>\n            {this.state.uploadState === UPLOAD_UPLOADING && (\n              <a href=\"#\" onClick={this.onUploadCancel}>{gettext('Cancel')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ERROR && (\n              <a href=\"#\" onClick={this.onUploadRetry}>{gettext('Retry')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ISSAVING && (\n              <span className=\"saving\">{gettext('Saving...')}</span>\n            )}\n            {this.state.uploadState === UPLOAD_UPLOADED && (\n              <span className=\"uploaded\">{gettext('Uploaded')}</span>\n            )}\n          </Fragment>\n        </td>\n      </tr>\n    );\n  }\n}\n\nUploadListItem.propTypes = propTypes;\n\nexport default UploadListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { gettext, maxUploadFileSize } from '../../utils/constants';\n\nconst propTypes = {\n  file: PropTypes.object,\n};\n\nclass ForbidUploadListItem extends React.Component {\n\n  render() {\n    let { file } = this.props;\n    let msg = gettext('Please upload files less than {placeholder}M').replace('{placeholder}', maxUploadFileSize);\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{file.name}</div>\n        </td>\n\n        <td colSpan={3} className=\"error\">{msg}</td>\n      </tr>\n    );\n  }\n}\n\nForbidUploadListItem.propTypes = propTypes;\n\nexport default ForbidUploadListItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { gettext } from '../../utils/constants';\nimport UploadListItem from './upload-list-item';\nimport ForbidUploadListItem from './forbid-upload-list-item';\n\nconst propTypes = {\n  uploadFileList: PropTypes.array.isRequired,\n  forbidUploadFileList: PropTypes.array.isRequired,\n  onCancelAllUploading: PropTypes.func.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n  onFileUpload: PropTypes.func.isRequired,\n  onFolderUpload: PropTypes.func.isRequired,\n  allFilesUploaded: PropTypes.bool.isRequired\n};\n\nclass UploadProgressDialog extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropdown = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  render() {\n    let { allFilesUploaded } = this.props;\n    return (\n      <Fragment>\n        <div className=\"text-center\">\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\n            <DropdownToggle color=\"primary\" caret>{gettext('Upload')}</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.props.onFileUpload}>{gettext('Upload Files')}</DropdownItem>\n              <DropdownItem onClick={this.props.onFolderUpload}>{gettext('Upload Folder')}</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n          <Button color=\"primary\" outline={true} className=\"ml-4\"\n            onClick={this.props.onCancelAllUploading}\n            disabled={allFilesUploaded}>\n            {gettext('Cancel All')}\n          </Button>\n        </div>\n        <div className=\"mt-4 mh-2\">\n          <table className=\"table-thead-hidden\">\n            <thead>\n              <tr>\n                <th width=\"35%\">{gettext('name')}</th>\n                <th width=\"15%\">{gettext('size')}</th>\n                <th width=\"35%\">{gettext('progress')}</th>\n                <th width=\"15%\">{gettext('state')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.forbidUploadFileList.map((file, index) => {\n                return (<ForbidUploadListItem key={index} file={file} />);\n              })}\n              {this.props.uploadFileList.map((resumableFile, index) => {\n                return (\n                  <UploadListItem\n                    key={index}\n                    resumableFile={resumableFile}\n                    onUploadCancel={this.props.onUploadCancel}\n                    onUploadRetry={this.props.onUploadRetry}\n                  />\n                );\n              })\n              }\n            </tbody>\n          </table>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nUploadProgressDialog.propTypes = propTypes;\n\nexport default UploadProgressDialog;\n","// This file is copied from frontend/src/components/file-uploader/file-uploader.js,\n// and modified according to the requirements of this page.\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Resumablejs from '@seafile/resumablejs';\nimport MD5 from 'MD5';\nimport { resumableUploadFileBlockSize, maxUploadFileSize, maxNumberOfFilesForFileupload } from '../../utils/constants';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { Utils } from '../../utils/utils';\nimport { gettext } from '../../utils/constants';\nimport UploadProgressDialog from './upload-progress-dialog';\nimport toaster from '../../components/toast';\n\nimport '../../css/file-uploader.css';\n\nconst propTypes = {\n  dragAndDrop: PropTypes.bool.isRequired,\n  token: PropTypes.string.isRequired,\n  repoID: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n\n  filetypes: PropTypes.array,\n  chunkSize: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  testMethod: PropTypes.string,\n  testChunks: PropTypes.number,\n  simultaneousUploads: PropTypes.number,\n  fileParameterName: PropTypes.string,\n  minFileSizeErrorCallback: PropTypes.func,\n  fileTypeErrorCallback: PropTypes.func,\n  onFileUploadSuccess: PropTypes.func.isRequired,\n};\n\nclass FileUploader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      retryFileList: [],\n      uploadFileList: [],\n      forbidUploadFileList: [],\n      totalProgress: 0,\n      isUploadProgressDialogShow: false,\n      currentResumableFile: null,\n      uploadBitrate: 0,\n      allFilesUploaded: false,\n    };\n\n    this.uploadInput = React.createRef();\n\n    this.notifiedFolders = [];\n\n    this.timestamp = null;\n    this.loaded = 0;\n    this.bitrateInterval = 500; // Interval in milliseconds to calculate the bitrate\n    this.isUploadLinkLoaded = false;\n\n    window.onbeforeunload = this.onbeforeunload;\n  }\n\n  componentDidMount() {\n    this.resumable = new Resumablejs({\n      target: '',\n      query: this.setQuery || {},\n      fileType: this.props.filetypes,\n      maxFiles: maxNumberOfFilesForFileupload || undefined,\n      maxFileSize: maxUploadFileSize * 1000 * 1000 || undefined,\n      testMethod: this.props.testMethod || 'post',\n      testChunks: this.props.testChunks || false,\n      headers: this.setHeaders || {},\n      withCredentials: this.props.withCredentials || false,\n      chunkSize: parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1 * 1024 * 1024,\n      simultaneousUploads: this.props.simultaneousUploads || 1,\n      fileParameterName: this.props.fileParameterName,\n      generateUniqueIdentifier: this.generateUniqueIdentifier,\n      forceChunkSize: true,\n      maxChunkRetries: 3,\n      minFileSize: 0,\n    });\n\n    this.resumable.assignBrowse(this.uploadInput.current, true);\n    if (this.props.dragAndDrop) {\n      this.resumable.assignDrop(document.getElementById('upload-link-drop-zone'));\n    }\n\n    this.bindCallbackHandler();\n    this.bindEventHandler();\n  }\n\n  componentWillUnmount = () => {\n    window.onbeforeunload = null;\n    if (this.props.dragAndDrop === true) {\n      this.resumable.disableDropOnDocument();\n    }\n  }\n\n  onbeforeunload = () => {\n    if (window.uploader &&\n        window.uploader.isUploadProgressDialogShow &&\n        window.uploader.totalProgress !== 100) {\n      return '';\n    }\n  }\n\n  bindCallbackHandler = () => {\n    let { minFileSizeErrorCallback, fileTypeErrorCallback } = this.props;\n\n    if (this.maxFilesErrorCallback) {\n      this.resumable.opts.maxFilesErrorCallback = this.maxFilesErrorCallback;\n    }\n\n    if (minFileSizeErrorCallback) {\n      this.resumable.opts.minFileSizeErrorCallback = this.props.minFileSizeErrorCallback;\n    }\n\n    if (this.maxFileSizeErrorCallback) {\n      this.resumable.opts.maxFileSizeErrorCallback = this.maxFileSizeErrorCallback;\n    }\n\n    if (fileTypeErrorCallback) {\n      this.resumable.opts.fileTypeErrorCallback = this.props.fileTypeErrorCallback;\n    }\n\n  }\n\n  bindEventHandler = () => {\n    this.resumable.on('chunkingComplete', this.onChunkingComplete.bind(this));\n    this.resumable.on('fileAdded', this.onFileAdded.bind(this));\n    this.resumable.on('fileProgress', this.onFileProgress.bind(this));\n    this.resumable.on('fileSuccess', this.onFileUploadSuccess.bind(this));\n    this.resumable.on('progress', this.onProgress.bind(this));\n    this.resumable.on('complete', this.onComplete.bind(this));\n    this.resumable.on('fileError', this.onFileError.bind(this));\n    this.resumable.on('error', this.onError.bind(this));\n    this.resumable.on('dragstart', this.onDragStart.bind(this));\n  }\n\n  maxFilesErrorCallback = (files, errorCount) => {\n    let maxFiles = maxNumberOfFilesForFileupload;\n    let message = gettext('Please upload no more than {maxFiles} files at a time.');\n    message = message.replace('{maxFiles}', maxFiles);\n    toaster.danger(message);\n  }\n\n  maxFileSizeErrorCallback = (file) => {\n    let { forbidUploadFileList } = this.state;\n    forbidUploadFileList.push(file);\n    this.setState({forbidUploadFileList: forbidUploadFileList});\n  }\n\n  onChunkingComplete = (resumableFile) => {\n\n    let allFilesUploaded = this.state.allFilesUploaded;\n    if (allFilesUploaded === true) {\n      this.setState({allFilesUploaded: false});\n    }\n\n    let path = this.props.path;\n    let fileName = resumableFile.fileName;\n    let relativePath = resumableFile.relativePath;\n    let isFile = fileName === relativePath;\n\n    resumableFile.formData = {};\n    if (isFile) { // upload file\n      resumableFile.formData  = {\n        parent_dir: path,\n      };\n    } else { // upload folder\n      let relative_path = relativePath.slice(0, relativePath.lastIndexOf('/') + 1);\n      resumableFile.formData  = {\n        parent_dir: path,\n        relative_path: relative_path\n      };\n    }\n  }\n\n  onFileAdded = (resumableFile, files) => {\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (isFile && files.length === 1) {\n      let hasRepetition = false;\n      /*\n      let direntList = this.props.direntList;\n      for (let i = 0; i < direntList.length; i++) {\n        if (direntList[i].type === 'file' && direntList[i].name === resumableFile.fileName) {\n          hasRepetition = true;\n          break;\n        }\n      }\n      */\n      if (hasRepetition) {\n        this.setState({\n          isUploadRemindDialogShow: true,\n          currentResumableFile: resumableFile,\n        });\n      } else {\n        this.setUploadFileList(this.resumable.files);\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumableUpload(resumableFile);\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    } else {\n      this.setUploadFileList(this.resumable.files);\n      if (!this.isUploadLinkLoaded) {\n        this.isUploadLinkLoaded = true;\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumable.upload();\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    }\n  }\n\n  resumableUpload = (resumableFile) => {\n    let { repoID, path } = this.props;\n    seafileAPI.getFileUploadedBytes(repoID, path, resumableFile.fileName).then(res => {\n      let uploadedBytes = res.data.uploadedBytes;\n      let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n      let offset = Math.floor(uploadedBytes / blockSize);\n      resumableFile.markChunksCompleted(offset);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  filesAddedComplete = (resumable, files) => {\n    let { forbidUploadFileList } = this.state;\n    if (forbidUploadFileList.length > 0 && files.length === 0) {\n      this.setState({\n        isUploadProgressDialogShow: true,\n        totalProgress: 100\n      });\n    }\n  }\n\n  setUploadFileList = () => {\n    let uploadFileList = this.resumable.files;\n    this.setState({\n      uploadFileList: uploadFileList,\n      isUploadProgressDialogShow: true,\n    });\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', true);\n  }\n\n  onFileProgress = (resumableFile) => {\n    let uploadBitrate = this.getBitrate();\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        if (uploadBitrate) {\n          let lastSize = (item.size - (item.size * item.progress())) * 8;\n          let time = Math.floor(lastSize / uploadBitrate);\n          item.remainingTime = time;\n        }\n      }\n      return item;\n    });\n\n    this.setState({\n      uploadBitrate: uploadBitrate,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  getBitrate = () => {\n    let loaded = 0;\n    let uploadBitrate = 0;\n    let now = new Date().getTime();\n\n    this.resumable.files.forEach(file => {\n      loaded += file.progress() * file.size;\n    });\n\n    if (this.timestamp) {\n      let timeDiff = (now - this.timestamp);\n      if (timeDiff < this.bitrateInterval) {\n        return this.state.uploadBitrate;\n      }\n\n      // 1. Cancel will produce loaded greater than this.loaded\n      // 2. reset can make this.loaded to be 0\n      if (loaded < this.loaded || this.loaded === 0) {\n        this.loaded = loaded; //\n      }\n\n      uploadBitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n    }\n\n    this.timestamp = now;\n    this.loaded = loaded;\n\n    return uploadBitrate;\n  }\n\n  onProgress = () => {\n    let progress = Math.round(this.resumable.progress() * 100);\n    this.setState({totalProgress: progress});\n    Utils.registerGlobalVariable('uploader', 'totalProgress', progress);\n  }\n\n  onFileUploadSuccess = (resumableFile, message) => {\n    let formData = resumableFile.formData;\n    let currentTime = new Date().getTime()/1000;\n    message = formData.replace ? message : JSON.parse(message)[0];\n    if (formData.relative_path) { // upload folder\n      let relative_path = formData.relative_path;\n      let dir_name = relative_path.slice(0, relative_path.indexOf('/'));\n      let dirent = {\n        id: message.id,\n        name: dir_name,\n        type: 'dir',\n        mtime: currentTime,\n      };\n\n      // update folders cache\n      let isExist = this.notifiedFolders.some(item => {return item.name === dirent.name;});\n      if (!isExist) {\n        this.notifiedFolders.push(dirent);\n        this.props.onFileUploadSuccess(dirent);\n      }\n\n      // update uploadFileList\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = relative_path + message.name;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    if (formData.replace) { // upload file -- replace exist file\n      let fileName = resumableFile.fileName;\n      let dirent = {\n        id: message,\n        name: fileName,\n        type: 'file',\n        mtime: currentTime\n      };\n      this.props.onFileUploadSuccess(dirent); // this contance: just one file\n\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = fileName;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    // upload file -- add files\n    let dirent = {\n      id: message.id,\n      type: 'file',\n      name: message.name,\n      size: message.size,\n      mtime: currentTime,\n    };\n    this.props.onFileUploadSuccess(dirent);\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        item.newFileName = message.name;\n        item.isSaved = true;\n      }\n      return item;\n    });\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onFileError = (resumableFile, message) => {\n    let error = '';\n    if (!message) {\n      error = gettext('Network error');\n    } else {\n      // eg: '{\"error\": \"Internal error\" \\n }'\n      let errorMessage = message.replace(/\\n/g, '');\n      errorMessage  = JSON.parse(errorMessage);\n      error = errorMessage.error;\n      if (error === 'File locked by others.') {\n        error = gettext('File is locked by others.');\n      }\n      if (error === 'Internal error.') {\n        error = gettext('Internal Server Error');\n      }\n    }\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        this.state.retryFileList.push(item);\n        item.error = error;\n      }\n      return item;\n    });\n\n    this.loaded = 0;  // reset loaded data;\n    this.setState({\n      retryFileList: this.state.retryFileList,\n      uploadFileList: uploadFileList\n    });\n\n  }\n\n  onComplete = () => {\n    this.notifiedFolders = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({allFilesUploaded: true});\n  }\n\n  onError = (message) => {\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    // After the error, the user can switch windows\n    Utils.registerGlobalVariable('uploader', 'totalProgress', 100);\n  }\n\n  setHeaders = (resumableFile, resumable) => {\n    let offset = resumable.offset;\n    let chunkSize = resumable.getOpt('chunkSize');\n    let fileSize = resumableFile.size === 0 ? 1 : resumableFile.size;\n    let startByte = offset !== 0 ? offset * chunkSize : 0;\n    let endByte = Math.min(fileSize, (offset + 1) * chunkSize) - 1;\n\n    if (fileSize - resumable.endByte < chunkSize && !resumable.getOpt('forceChunkSize')) {\n      endByte = fileSize;\n    }\n\n    let headers = {\n      'Accept': 'application/json; text/javascript, */*; q=0.01',\n      'Content-Disposition': 'attachment; filename=\"' + encodeURI(resumableFile.fileName) + '\"',\n      'Content-Range': 'bytes ' + startByte + '-' + endByte + '/' + fileSize,\n    };\n\n    return headers;\n  }\n\n  setQuery = (resumableFile) => {\n    let formData = resumableFile.formData;\n    return formData;\n  }\n\n  generateUniqueIdentifier = (file) => {\n    let relativePath = file.webkitRelativePath||file.relativePath||file.fileName||file.name;\n    return MD5(relativePath + new Date()) + relativePath;\n  }\n\n  onClick = (e) => {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  }\n\n  onFileUpload = () => {\n    this.uploadInput.current.removeAttribute('webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onFolderUpload = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onDragStart = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n  }\n\n  onCloseUploadDialog = () => {\n    this.loaded = 0;\n    this.resumable.files = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({isUploadProgressDialogShow: false, uploadFileList: [], forbidUploadFileList: []});\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', false);\n  }\n\n  onUploadCancel = (uploadingItem) => {\n\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (item.uniqueIdentifier === uploadingItem.uniqueIdentifier) {\n        item.cancel(); // execute cancel function will delete the file at the same time\n        return false;\n      }\n      return true;\n    });\n\n    if (!this.resumable.isUploading()) {\n      this.setState({\n        totalProgress: '100',\n        allFilesUploaded: true,\n      });\n      this.loaded = 0;\n    }\n\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onCancelAllUploading = () => {\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (Math.round(item.progress() !== 1)) {\n        item.cancel();\n        return false;\n      }\n      return true;\n    });\n\n    this.loaded = 0;\n\n    this.setState({\n      allFilesUploaded: true,\n      totalProgress: '100',\n      uploadFileList: uploadFileList\n    });\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n  }\n\n  onUploadRetry = (resumableFile) => {\n    seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n      this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n      let retryFileList = this.state.retryFileList.filter(item => {\n        return item.uniqueIdentifier !== resumableFile.uniqueIdentifier;\n      });\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.error = null;\n          this.retryUploadFile(item);\n        }\n        return item;\n      });\n\n      this.setState({\n        retryFileList: retryFileList,\n        uploadFileList: uploadFileList\n      });\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  retryUploadFile = (resumableFile) => {\n    let { repoID, path } = this.props;\n    let fileName = resumableFile.fileName;\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (!isFile) {\n      let relative_path = resumableFile.formData.relative_path;\n      let prefix = path === '/' ? (path + relative_path) : (path + '/' + relative_path);\n      fileName = prefix + fileName;\n    }\n\n    resumableFile.bootstrap();\n    var firedRetry = false;\n    resumableFile.resumableObj.on('chunkingComplete', () => {\n      if(!firedRetry) {\n        seafileAPI.getFileUploadedBytes(repoID, path, fileName).then(res => {\n          let uploadedBytes = res.data.uploadedBytes;\n          let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n          let offset = Math.floor(uploadedBytes / blockSize);\n          resumableFile.markChunksCompleted(offset);\n\n          resumableFile.resumableObj.upload();\n\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n      firedRetry = true;\n    });\n\n  }\n\n  replaceRepetitionFile = () => {\n    let { repoID, path } = this.props;\n    seafileAPI.getUpdateLink(repoID, path).then(res => {\n      this.resumable.opts.target = res.data;\n\n      let resumableFile = this.resumable.files[this.resumable.files.length - 1];\n      resumableFile.formData['replace'] = 1;\n      resumableFile.formData['target_file'] = resumableFile.formData.parent_dir + resumableFile.fileName;\n      this.setUploadFileList(this.resumable.files);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  cancelFileUpload = () => {\n    this.resumable.files.pop(); //delete latest file；\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"file-uploader-container\">\n          <div className=\"file-uploader\">\n            <input className=\"upload-input\" type=\"file\" ref={this.uploadInput} onClick={this.onClick} />\n          </div>\n        </div>\n        <UploadProgressDialog\n          retryFileList={this.state.retryFileList}\n          uploadFileList={this.state.uploadFileList}\n          forbidUploadFileList={this.state.forbidUploadFileList}\n          totalProgress={this.state.totalProgress}\n          uploadBitrate={this.state.uploadBitrate}\n          allFilesUploaded={this.state.allFilesUploaded}\n          onCloseUploadDialog={this.onCloseUploadDialog}\n          onCancelAllUploading={this.onCancelAllUploading}\n          onUploadCancel={this.onUploadCancel}\n          onUploadRetry={this.onUploadRetry}\n          onFileUpload={this.onFileUpload}\n          onFolderUpload={this.onFolderUpload}\n        />\n      </Fragment>\n    );\n  }\n}\n\nFileUploader.propTypes = propTypes;\n\nexport default FileUploader;\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Utils } from '../../utils/utils';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { gettext } from '../../utils/constants';\nimport Logo from '../../components/logo';\nimport Account from '../../components/common/account';\nimport FileUploader from './file-uploader';\n\nimport '../../css/upload-link.css';\n\nconst loggedUser = window.app.pageOptions.username;\nconst {\n  dirName,\n  sharedBy,\n  noQuota,\n  maxUploadFileSize,\n  token,\n  repoID,\n  path\n} = window.uploadLink;\n\n\nclass SharedUploadLink extends React.Component {\n\n  onFileUploadSuccess = (direntObject) => {\n    const { name, size } = direntObject;\n    seafileAPI.shareLinksUploadDone(token, Utils.joinPath(path, name));\n  }\n\n  render() {\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <div className=\"top-header d-flex justify-content-between\">\n          <Logo />\n          {loggedUser && <Account />}\n        </div>\n        <div className=\"o-auto\">\n          <div className=\"py-4 px-6 mx-auto rounded\" id=\"upload-link-panel\">\n            <h3 className=\"h5\" dangerouslySetInnerHTML={{__html: gettext('Upload files to {folder_name_placeholder}')\n              .replace('{folder_name_placeholder}', `<span class=\"op-target\">${Utils.HTMLescape(dirName)}</span>`)}}></h3>\n            <p className=\"small shared-by\" dangerouslySetInnerHTML={{__html: `${gettext('shared by:')} ${sharedBy.avatar} ${sharedBy.name}`}}></p>\n            {noQuota ? (\n              <div className=\"py-6 text-center\">\n                <span className=\"sf3-font sf3-font-tips warning-icon\"></span>\n                <p>{gettext('The owner of this library has run out of space.')}</p>\n              </div>\n            ) : (\n              <Fragment>\n                <ol className=\"small text-gray\">\n                  <li className=\"tip-list-item\">{gettext('Folder upload is limited to Chrome, Firefox 50+, and Microsoft Edge.')}</li>\n                  {maxUploadFileSize && <li className=\"tip-list-item\">{gettext('File size should be smaller than {max_size_placeholder}.').replace('{max_size_placeholder}', maxUploadFileSize)}</li>}\n                </ol>\n                <div id=\"upload-link-drop-zone\" className=\"text-center mt-2 mb-4\">\n                  <span className=\"sf3-font sf3-font-upload upload-icon\"></span>\n                  <p className=\"small text-gray mb-0\">{gettext('Drag and drop files or folders here.')}</p>\n                </div>\n                <FileUploader\n                  ref={uploader => this.uploader = uploader}\n                  dragAndDrop={true}\n                  token={token}\n                  repoID={repoID}\n                  path={path}\n                  onFileUploadSuccess={this.onFileUploadSuccess}\n                />\n              </Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <SharedUploadLink />,\n  document.getElementById('wrapper')\n);\n"],"sourceRoot":""}